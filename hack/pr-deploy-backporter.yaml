apiVersion: template.openshift.io/v1
kind: Template
parameters:
- description: The PR to deploy from.
  name: PULL_REQUEST
  required: true
- description: The fork to deploy from.
  name: USER
  required: true
- description: The branch to deploy from.
  name: BRANCH
  required: true
objects:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ci-tools-${PULL_REQUEST}
    annotations:
      ci.openshift.io/ttl.hard: 48h0m0s
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: author-admin
    namespace: ci-tools-${PULL_REQUEST}
  roleRef:
    kind: ClusterRole
    name: admin
    namespace: ci-tools-${PULL_REQUEST}
  subjects:
    - kind: User
      name: ${USER}
      apiGroup: rbac.authorization.k8s.io
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    name: output
  spec:
    lookupPolicy:
      local: true
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: bp-server
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: output:bp-server
    source:
      contextDir: images/bugzilla-backporter
      git:
        ref: ${BRANCH}
        uri: https://github.com/${USER}/ci-tools.git
      images:
      - from:
          kind: ImageStreamTag
          namespace: ci-tools-${PULL_REQUEST}
          name: "output:bp-binaries"
        paths:
        - destinationDir: images/bugzilla-backporter/.
          sourcePath: /go/bin/bugzilla-backporter
      type: Git
    strategy:
      dockerStrategy:
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - type: ImageChange
      imageChange:
        from:
          kind: ImageStreamTag
          namespace: ci-tools-${PULL_REQUEST}
          name: "output:bp-binaries"
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: bp-binaries
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "output:bp-binaries"
    source:
      dockerfile: |
        FROM registry.ci.openshift.org/openshift/release:golang-1.13

        COPY . .
        RUN go install ./cmd/bugzilla-backporter/...
      git:
        ref: ${BRANCH}
        uri: https://github.com/${USER}/ci-tools.git
      contextDir: ./
      type: Git
    strategy:
      dockerStrategy:
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - type: ConfigChange
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: bugzilla-backporter
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    lookupPolicy:
      local: true
    tags:
    - name: latest
      importPolicy:
        scheduled: true
      from:
        kind: DockerImage
        name: registry.svc.ci.openshift.org/ci/bugzilla-backporter
- apiVersion: v1
  kind: Service
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    labels:
      app: bp-server
    name: bp-server
  spec:
    ports:
    - name: main
      port: 80
      protocol: TCP
      targetPort: main
    selector:
      app: bp-server
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: bp-server
    name: bp-server
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    port:
      targetPort: main
    to:
      kind: Service
      name: bp-server
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    name: bp-server
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"output:bp-server"},"fieldPath":"spec.template.spec.containers[?(@.name==\"bugzilla-backporter\")].image"}]'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: bp-server
    template:
      metadata:
        labels:
          app: bp-server
      spec:
        containers:
        - name: bugzilla-backporter
          image: "output:bp-server"
          imagePullPolicy: Always
          args:
          - -bugzilla-endpoint=https://bugzilla.redhat.com/
          - -bugzilla-api-key-path=/etc/bugzilla/api
          - -log-level=debug
          - -plugin-config=/etc/plugins/plugins.yaml
          ports:
          - name: main
            containerPort: 8080
          volumeMounts:
          - name: bugzilla
            mountPath: /etc/bugzilla
            readOnly: true
          - name: plugins
            mountPath: /etc/plugins
            readOnly: true
          resources:
            requests:
              memory: "2Gi"
              cpu: "200m"
        volumes:
        - name: bugzilla
          secret:
            secretName: bugzilla-credentials-openshift-bugzilla-robot
        - name: plugins
          configMap:
            name: plugins