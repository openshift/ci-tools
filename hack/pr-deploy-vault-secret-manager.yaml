apiVersion: template.openshift.io/v1
kind: Template
parameters:
- description: The PR to deploy from.
  name: PULL_REQUEST
  required: true
- description: The fork to deploy from.
  name: USER
  required: true
- description: The branch to deploy from.
  name: BRANCH
  required: true
objects:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ci-tools-${PULL_REQUEST}
    annotations:
      ci.openshift.io/ttl.hard: 48h0m0s
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    name: output
  spec:
    lookupPolicy:
      local: true
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: vault-secret-collection-manager
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "output:vault-secret-collection-manager"
    source:
      dockerfile: |
        FROM registry.ci.openshift.org/openshift/release:golang-1.16-vault-typescript

        COPY . .
        RUN \
          make cmd/vault-secret-collection-manager/index.js && \
          go install ./cmd/vault-secret-collection-manager/
      git:
        ref: ${BRANCH}
        uri: https://github.com/${USER}/ci-tools.git
      contextDir: ./
      type: Git
    strategy:
      dockerStrategy:
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    name: vault-secret-collection-manager
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8090
    selector:
      app: vault-secret-collection-manager
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
    name: vault-secret-collection-manager
    namespace: ci-tools-${PULL_REQUEST}
  spec:
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    port:
      targetPort: 8090
    to:
      kind: Service
      name: vault-secret-collection-manager
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    namespace: ci-tools-${PULL_REQUEST}
    name: vault-secret-collection-manager
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"output:vault-secret-collection-manager"},"fieldPath":"spec.template.spec.containers[?(@.name==\"vault-secret-collection-manager\")].image"}]'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: vault-secret-collection-manager
    template:
      metadata:
        labels:
          app: vault-secret-collection-manager
        annotations:
          nginx-config: |
            server {
              listen 8090;
              location / {
                proxy_set_header X-Forwarded-Email admin@example.com;
                proxy_pass http://localhost:8080;
              }
            }
      spec:
        volumes:
        - name: nginx-config
          downwardAPI:
            items:
            - path: default.conf
              fieldRef:
                fieldPath: metadata.annotations['nginx-config']
        containers:
        - name: vault-secret-collection-manager
          image: output:vault-secret-collection-manager
          imagePullPolicy: Always
          command:
          command:
          - /go/bin/vault-secret-collection-manager
          - -vault-token=jpuxZFWWFW7vM882GGX2aWOE
        - name: vault
          image: image-registry.openshift-image-registry.svc:5000/vault/vault:1.6.2
          env:
          - name: VAULT_DISABLE_MLOCK
            value: "true"
          - name: SKIP_CHOWN
            value: "true"
          - name: SKIP_SETCAP
            value: "true"
          - name: HOME
            value: /tmp
          args:
          - server
          - -dev
          - --dev-listen-address=127.0.0.1:8300
          - -dev-root-token-id=jpuxZFWWFW7vM882GGX2aWOE
        - name: vault-configurator
          # We need jq and installing anything requires root which is a huge hassle in Openshift
          image: golang-1.16-vault
          image: image-registry.openshift-image-registry.svc:5000/openshift/release:golang-1.16-vault
          env:
          - name: VAULT_ADDR
            value: http://127.0.0.1:8300
          - name: VAULT_TOKEN
            value: jpuxZFWWFW7vM882GGX2aWOE
          command:
          - /bin/sh
          - -c
          - |-
            # Need a second backend to be able to test
            # the interaction with aliases
            vault auth enable userpass
            # User must exist
            vault write auth/userpass/users/admin password=false
            vault write identity/entity name=admin policies=default
            vault write identity/entity-alias name=admin \
              canonical_id="$(vault read --format=json identity/entity/name/admin|jq -r '.data.id')" \
              mount_accessor="$(vault auth list -format=json | jq -r '.["userpass/"].accessor')" &&
            sleep 9999
        # We use nginx to statically add an X-Forwarded-Email header, because deploying oauth2 proxy and
        # dex is problematic, as their config requires to know each others url to get the login flow to
        # work.
        - name: nginx
          # Mirror of nginxinc/nginx-unprivileged:1.17
          image: quay.io/alvaroaleman/debug-pub:nginx-unprivileged-1.17
          volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d
