metadata:
  annotations:
    ci.openshift.io/job-spec: ""
  creationTimestamp: null
  labels:
    OPENSHIFT_CI: "true"
    ci.openshift.io/metadata.branch: ""
    ci.openshift.io/metadata.org: ""
    ci.openshift.io/metadata.repo: ""
    ci.openshift.io/metadata.target: ""
    ci.openshift.io/metadata.variant: ""
    created-by-ci: "true"
    creates: src
  name: src
  namespace: namespace
spec:
  nodeSelector: null
  output:
    imageLabels:
    - name: io.openshift.ci.from.root
      value: imagedigest
    to:
      kind: ImageStreamTag
      name: pipeline:src
      namespace: namespace
  postCommit: {}
  resources:
    requests:
      cpu: 200m
  source:
    dockerfile: |2

      FROM pipeline:root
      ADD ./clonerefs /clonerefs
      ADD /ssh_config /etc/ssh/ssh_config
      COPY ./ssh-privatekey /sshprivatekey
      RUN umask 0002 && /clonerefs && find /go/src -type d -not -perm -0775 | xargs --max-procs 10 --max-args 100 --no-run-if-empty chmod g+xw
      WORKDIR /go/src/github.com/org/repo/
      ENV GOPATH=/go
      RUN rm -f /sshprivatekey
    images:
    - from:
        kind: ImageStreamTag
        name: clonerefs:latest
        namespace: ci
      paths:
      - destinationDir: .
        sourcePath: /clonerefs
      - destinationDir: .
        sourcePath: /ssh_config
    secrets:
    - secret:
        name: ssh-nykd6bfg
    type: Dockerfile
  strategy:
    dockerStrategy:
      env:
      - name: BUILD_LOGLEVEL
        value: "0"
      - name: CLONEREFS_OPTIONS
        value: '{"src_root":"/go","log":"/dev/null","git_user_name":"ci-robot","git_user_email":"ci-robot@openshift.io","refs":[{"org":"org","repo":"repo","base_ref":"master","base_sha":"masterSHA","pulls":[{"number":1,"author":"","sha":"pullSHA"}],"clone_uri":"ssh://git@github.com/org/repo.git"}],"key_files":["/sshprivatekey"],"fail":true}'
      forcePull: true
      from:
        kind: ImageStreamTag
        name: pipeline:root
        namespace: namespace
      imageOptimizationPolicy: SkipLayers
      noCache: true
    type: Docker
status:
  output: {}
  phase: ""
